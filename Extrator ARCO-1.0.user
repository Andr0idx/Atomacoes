// ==UserScript==
// @name         Extrator ARCO
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Extrai dados Na base e Na rua do Arco Loggi com melhorias visuais e anima√ß√µes inspiradas no EST√ÅGISCRAVO. Abrindo abas sequencialmente, coleta dados via postMessage, bot√£o inicia extra√ß√£o e log visual aprimorado.
// @author       Gabriel Guedes Araujo da Sila
// @match        https://arco.loggi.com/*/na-base/colecoes
// @match        https://arco.loggi.com/*/na-rua/colecoes
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // ==== CONFIGURA√á√ïES ====
    const sheetId = '1ST5rfClXrd8lEwQqjsRaFMeIwJ4M_yH7pWsVIlbqIMk';
    const gid = '827520507';
    const urlPlanilha = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:json&gid=${gid}`;
    const TIMEOUT_MS = 120000; // 2 minutos timeout para coleta de dados

    // --- Vari√°veis para anima√ß√£o / marca d'√°gua ---
    let iconeMarcaDagua = null;
    let textoMarcaDagua = null;
    let loadingContainerAnim = null;
    let loadingTexto = null;
    let fecharComCliqueHandler = null;

    // --- Helpers ---
    function esperar(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }

    function extrairNumero(texto) {
        if (!texto) return null;
        const match = texto.match(/[\d.]+/);
        if (!match) return null;
        return parseInt(match[0].replace(/\./g, ''), 10);
    }

    // --- Fun√ß√£o mostrarBanner inclu√≠da para evitar erro ---
    function mostrarBanner(texto) {
        const id = '__arco_loggi_banner__';
        const bannerExistente = document.getElementById(id);
        if (bannerExistente) bannerExistente.remove();

        const banner = document.createElement('div');
        banner.id = id;
        Object.assign(banner.style, {
            position: 'fixed',
            top: '0',
            left: '0',
            width: '100%',
            backgroundColor: '#25D366',
            color: 'white',
            padding: '10px',
            fontSize: '16px',
            fontWeight: 'bold',
            whiteSpace: 'pre-line',
            zIndex: 10000,
            textAlign: 'center',
            fontFamily: '"Segoe UI", Tahoma, Geneva, Verdana, sans-serif',
        });
        banner.textContent = texto;
        document.body.appendChild(banner);
        setTimeout(() => banner.remove(), 15000);
    }

    // --- Marca d'√°gua animada no canto inferior direito com texto e emoji ---
    function adicionarIconeMarcaDagua() {
        if (iconeMarcaDagua) return; // prevenir m√∫ltiplas inser√ß√µes

        const container = document.createElement('div');
        container.style.position = 'fixed';
        container.style.bottom = '10px';
        container.style.right = '25px';
        container.style.width = '280px';
        container.style.height = '40px';
        container.style.overflow = 'hidden';
        container.style.zIndex = '9999';
        container.style.userSelect = 'none';
        container.style.pointerEvents = 'none';

        const textoContainer = document.createElement('div');
        textoContainer.style.position = 'absolute';
        textoContainer.style.top = '55%';
        textoContainer.style.right = '30px';
        textoContainer.style.transform = 'translateY(-50%)';
        textoContainer.style.overflow = 'hidden';
        textoContainer.style.zIndex = '1';

        textoMarcaDagua = document.createElement('div');
        textoMarcaDagua.style.whiteSpace = 'nowrap';
        textoMarcaDagua.innerHTML = 'EXTRATOR ARCO LOGGI ATIVO!<span style="display:inline-block; width:5px;"></span>';
        textoMarcaDagua.style.color = '#FFFFFF';
        textoMarcaDagua.style.backgroundColor = '#25D366';
        textoMarcaDagua.style.padding = '4px 10px';
        textoMarcaDagua.style.borderRadius = '20px';
        textoMarcaDagua.style.fontWeight = 'bold';
        textoMarcaDagua.style.fontSize = '16px';
        textoMarcaDagua.style.opacity = '1';
        textoMarcaDagua.style.transform = 'translateX(100%) scale(0.8)';
        textoMarcaDagua.style.transition = 'transform 1s ease-in-out, opacity 1s ease';
        textoContainer.appendChild(textoMarcaDagua);

        const iconeContainer = document.createElement('div');
        iconeContainer.style.position = 'absolute';
        iconeContainer.style.top = '50%';
        iconeContainer.style.right = '0';
        iconeContainer.style.transform = 'translateY(-50%)';
        iconeContainer.style.zIndex = '2';

        iconeMarcaDagua = document.createElement('div');
        iconeMarcaDagua.textContent = 'ü§ñ';
        iconeMarcaDagua.style.fontSize = '30px';
        iconeMarcaDagua.style.opacity = '1';
        iconeMarcaDagua.style.transition = 'opacity 1s ease';
        iconeContainer.appendChild(iconeMarcaDagua);

        container.appendChild(textoContainer);
        container.appendChild(iconeContainer);
        document.body.appendChild(container);

        setTimeout(() => {
            textoMarcaDagua.style.transform = 'translateX(calc(12% - 2px)) scale(0.8)';
        }, 100);

        setTimeout(() => {
            textoMarcaDagua.style.transform = 'translateX(100%) scale(0.8)';
        }, 4000);

        setTimeout(() => {
            iconeMarcaDagua.style.opacity = '0.15';
        }, 5200);

        setTimeout(() => {
            textoMarcaDagua.style.opacity = '0';
        }, 5600);
    }

    // --- Popup animado elegante para status / logs visuais ---
    function criarPopupAnimadoAnim(textoInicial, corTexto = '#FFFFFF', corFundo = '#25D366') {
        if (loadingContainerAnim) return;

        loadingContainerAnim = document.createElement('div');
        loadingContainerAnim.style.position = 'fixed';
        loadingContainerAnim.style.bottom = '8px';
        loadingContainerAnim.style.right = '20px';
        loadingContainerAnim.style.width = '500px';
        loadingContainerAnim.style.height = '40px';
        loadingContainerAnim.style.overflow = 'hidden';
        loadingContainerAnim.style.zIndex = '9998';
        loadingContainerAnim.style.userSelect = 'none';
        loadingContainerAnim.style.pointerEvents = 'none';

        const textoContainer = document.createElement('div');
        textoContainer.style.position = 'absolute';
        textoContainer.style.top = '50%';
        textoContainer.style.right = '30px';
        textoContainer.style.transform = 'translateY(-50%)';
        textoContainer.style.overflow = 'hidden';
        textoContainer.style.zIndex = '1';

        loadingTexto = document.createElement('div');
        loadingTexto.innerHTML = textoInicial + '<span style="display:inline-block; width:10px;"></span>';
        loadingTexto.style.color = corTexto;
        loadingTexto.style.backgroundColor = corFundo;
        loadingTexto.style.padding = '6px 12px';
        loadingTexto.style.borderRadius = '20px';
        loadingTexto.style.fontWeight = 'bold';
        loadingTexto.style.fontSize = '14px';
        loadingTexto.style.whiteSpace = 'nowrap';
        loadingTexto.style.opacity = '1';
        loadingTexto.style.transform = 'translateX(100%) scale(0.8)';
        loadingTexto.style.transition = 'transform 1.0s ease-in-out, opacity 1.0s ease';

        textoContainer.appendChild(loadingTexto);
        loadingContainerAnim.appendChild(textoContainer);
        document.body.appendChild(loadingContainerAnim);

        setTimeout(() => {
            loadingTexto.style.transform = 'translateX(calc(12% - 2px)) scale(0.8)';
            loadingTexto.style.opacity = '1';
            if (iconeMarcaDagua) iconeMarcaDagua.style.opacity = '1';
        }, 100);
    }

    async function atualizarTextoPopup(textoNovo, fecharDepois = false, delayAntesEntrada = 0, fecharDepoisClicar = false, corTexto = '#FFFFFF', corFundo = '#25D366') {
        if (!loadingTexto) return;

        loadingTexto.style.transform = 'translateX(100%) scale(0.8)';
        loadingTexto.style.opacity = '0';

        if (iconeMarcaDagua) {
            iconeMarcaDagua.style.transition = 'opacity 1s ease';
            iconeMarcaDagua.style.opacity = '0.15';
        }

        await esperar(290);

        if (loadingContainerAnim) {
            loadingContainerAnim.remove();
            loadingContainerAnim = null;
            loadingTexto = null;
        }

        if (delayAntesEntrada > 0) {
            await esperar(delayAntesEntrada);
        }

        if (!fecharDepois && !fecharDepoisClicar) {
            criarPopupAnimadoAnim(textoNovo, corTexto, corFundo);
        }

        if (fecharDepois) {
            criarPopupAnimadoAnim(textoNovo, corTexto, corFundo);
            setTimeout(() => {
                fecharPopupAnimado();
            }, 4000);
        }

        if (fecharDepoisClicar) {
            criarPopupAnimadoAnim(textoNovo, corTexto, corFundo);

            fecharComCliqueHandler = () => {
                fecharPopupAnimado();
                document.removeEventListener('click', fecharComCliqueHandler);
                fecharComCliqueHandler = null;
            };
            document.addEventListener('click', fecharComCliqueHandler);
        }
    }

    function fecharPopupAnimado() {
        if (!loadingTexto || !loadingContainerAnim) return;

        loadingTexto.style.transform = 'translateX(100%) scale(0.8)';
        loadingTexto.style.opacity = '0';

        if (iconeMarcaDagua) {
            iconeMarcaDagua.style.transition = 'opacity 1s ease';
            iconeMarcaDagua.style.opacity = '0.15';
        }

        setTimeout(() => {
            if (loadingContainerAnim) {
                loadingContainerAnim.remove();
                loadingContainerAnim = null;
                loadingTexto = null;
            }

            if (fecharComCliqueHandler) {
                document.removeEventListener('click', fecharComCliqueHandler);
                fecharComCliqueHandler = null;
            }
        }, 600);
    }

    // --- Fun√ß√£o helper para log visual e no console, usando emojis e estilo ---
    function logVisual(titulo, detalhes, cor = 'green') {
        console.groupCollapsed(`%c${titulo}`, `color: ${cor}; font-weight: bold; font-size: 14px`);
        console.log(detalhes);
        console.groupEnd();

        const textoPopup = `${titulo}\n${(typeof detalhes === 'string' && detalhes.length < 80) ? detalhes : ''}`;
        atualizarTextoPopup(textoPopup, false, 0, false, '#FFFFFF', cor === 'green' ? '#25D366' : '#d63031');
    }

    // --- Espera at√© que um seletor apare√ßa no DOM (m√°x timeout) ---
    async function esperarElemento(seletor, timeoutMs = 10000) {
        return new Promise((resolve, reject) => {
            if (document.querySelector(seletor)) return resolve(true);

            const observer = new MutationObserver(() => {
                if (document.querySelector(seletor)) {
                    observer.disconnect();
                    resolve(true);
                }
            });

            observer.observe(document, { childList: true, subtree: true });

            setTimeout(() => {
                observer.disconnect();
                reject(new Error(`Timeout esperando seletor: ${seletor}`));
            }, timeoutMs);
        });
    }

    // --- Extra√ß√£o dados Na Base ---
    function pegarNumeroPorLabelNaBase(label, contexto = document) {
        const divs = [...contexto.querySelectorAll('div.MuiBox-root')];
        for (const div of divs) {
            const p = div.querySelector('p.MuiTypography-root.MuiTypography-body1');
            if (p && p.textContent.trim().toLowerCase() === label.toLowerCase()) {
                const spanNumero = div.querySelector('h4.MuiTypography-root.MuiTypography-h4 > span.MuiBox-root');
                if (spanNumero) return extrairNumero(spanNumero.textContent);
            }
        }
        return null;
    }

    function baixarCsvResultados(resultados) {
    const cabecalho = [
    'Base',
    'Total de pacotes em base',
    'Em atraso (base)',
    'Para hoje (base)',
    'Total de pacotes na rua',
    'para hoje (na rua)',
    'atrasados (na rua)',
    'Insucessos (na rua)',
];

    const linhas = [cabecalho.join(';')];

    for (const sigla of Object.keys(resultados)) {
        const base = resultados[sigla]['EM BASE'] || {};
        const rua = resultados[sigla]['EM RUA'] || {};

        // Garantir que os valores s√£o strings/inteiros ou vazio caso indefinidos
        const linha = [
            sigla,
            base.totalNaBase ?? '',
            base.comAtraso ?? '',
            base.paraHoje ?? '',
            rua.naRua ?? '',
            rua.paraHoje ?? '',
            rua.atrasados ?? '',
            rua.insucessos ?? '',
        ];

        linhas.push(linha.join(';'));
    }

    const csvConteudo = linhas.join('\n');
    const blob = new Blob([csvConteudo], { type: 'text/csv;charset=utf-8;' });

    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;

    const dataAtual = new Date();
    const dataFormatada = dataAtual.toISOString().slice(0,10); // YYYY-MM-DD
    a.download = `extracao_arco_loggi_${dataFormatada}.csv`;

    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

    async function extrairDadosNaBase(contexto = document) {
        try {
            await esperarElemento('div.MuiBox-root', 10000);
        } catch (e) {
            console.warn(e.message);
        }

        let totalNaBase = null;
        const strong = [...contexto.querySelectorAll('h4.MuiTypography-root.MuiTypography-h4 strong')].find(
            (el) => el.textContent.trim() === 'Na base'
        );
        if (strong) {
            const h4Pai = strong.closest('h4.MuiTypography-root.MuiTypography-h4');
            if (h4Pai) {
                const container = h4Pai.parentElement;
                if (container) {
                    const outrosH4 = [...container.querySelectorAll('h4.MuiTypography-root.MuiTypography-h4')].filter(
                        (h4) => !h4.querySelector('strong')
                    );
                    if (outrosH4.length > 0) totalNaBase = extrairNumero(outrosH4[0].textContent);
                }
            }
        }

        const paraHoje = pegarNumeroPorLabelNaBase('Para hoje', contexto);
        const comAtraso = pegarNumeroPorLabelNaBase('Com atraso', contexto);
        const paraAmanha = pegarNumeroPorLabelNaBase('Para amanh√£', contexto);
        const paraDepois = pegarNumeroPorLabelNaBase('Para depois', contexto);

        return { totalNaBase, paraHoje, comAtraso, paraAmanha, paraDepois };
    }

    // --- Extra√ß√£o dados Na Rua ---
    function pegarNumeroPorLabelNaRua(label, contexto = document) {
        const h6s = [...contexto.querySelectorAll('h6.MuiTypography-root.MuiTypography-subtitle2')];
        for (const h6 of h6s) {
            if (h6.textContent.trim().toLowerCase() === label.toLowerCase()) {
                let container = h6.closest('div.MuiGrid-root.MuiGrid-item') || h6.parentElement;
                let em = container.querySelector('h2.MuiTypography-root.MuiTypography-h2 em');
                if (!em) {
                    let irmao = container.nextElementSibling;
                    while (irmao && !em) {
                        em = irmao.querySelector('h2.MuiTypography-root.MuiTypography-h2 em');
                        irmao = irmao.nextElementSibling;
                    }
                }
                if (em) return extrairNumero(em.textContent);
            }
        }
        return null;
    }

    function extrairDadosNaRua(contexto = document) {
        let naRua = null;
        const h4Pacotes = [...contexto.querySelectorAll('h4.MuiTypography-root.MuiTypography-h4')].find((h4) =>
            /pacotes/i.test(h4.textContent)
        );
        if (h4Pacotes) naRua = extrairNumero(h4Pacotes.textContent);

        const atrasados = pegarNumeroPorLabelNaRua('Atrasados', contexto);
        const insucessos = pegarNumeroPorLabelNaRua('Insucessos', contexto);
        const paraHoje = pegarNumeroPorLabelNaRua('Para hoje', contexto);

        return { naRua, atrasados, insucessos, paraHoje };
    }

    function isUrlValida(url) {
        return url && /^https?:\/\//i.test(url.trim());
    }

    async function buscarDadosPlanilha() {
        try {
            const response = await fetch(urlPlanilha);
            if (!response.ok) throw new Error(`Erro ao buscar a planilha: ${response.statusText}`);

            const text = await response.text();
            const jsonMatch = text.match(/google\.visualization\.Query\.setResponse\((.*)\);/s);
            if (!jsonMatch || jsonMatch.length < 2) throw new Error('Resposta da planilha inv√°lida');
            const data = JSON.parse(jsonMatch[1]);
            return data.table?.rows || [];
        } catch (error) {
            console.error('Erro ao buscar/processar planilha:', error);
            return null;
        }
    }

    // --- Mostrar resumo formatado com logs visuais e banner ---
    function mostrarResumoFormatado(resultados, linhas) {
        for (const linha of linhas) {
            const siglaBase = linha.siglaBase;
            const baseDados = resultados[siglaBase];
            if (!baseDados) continue;
            const base = baseDados['EM BASE'] || {};
            const rua = baseDados['EM RUA'] || {};

            const textoBase = `${siglaBase} - TOTAL DE PACOTES EM BASE: ${base.totalNaBase ?? '-'} | Em atraso: ${base.comAtraso ?? '-'} | Para hoje: ${base.paraHoje ?? '-'}`;
            const textoRua = `TOTAL DE PACOTES NA RUA: ${rua.naRua ?? '-'} | Para hoje: ${rua.paraHoje ?? '-'} | Atrasados: ${rua.atrasados ?? '-'} | Insucessos: ${rua.insucessos ?? '-'}`;

            logVisual(`Resultados [${siglaBase}]`, `${textoBase}\n${textoRua}`, '#25D366');
            mostrarBanner(textoBase + '\n' + textoRua);
        }
    }

    // --- Abrir abas para extrair dados e coletar via postMessage ---
    async function iniciarExtracaoComPermissaoUser() {
        try {
            criarPopupAnimadoAnim('Buscando dados na planilha...', '#FFFFFF', '#25D366');
            const rows = await buscarDadosPlanilha();
            if (!rows || rows.length === 0) {
                mostrarBanner('Nenhuma entrada na planilha para extrair.');
                await atualizarTextoPopup('Nenhuma entrada na planilha!', true, 0, false, '#FFFFFF', '#d63031');
                return;
            }

            const todasLinhas = rows.slice(1).map((r) => ({
                siglaBase: r.c[0]?.v?.toString().trim() || '',
                nomeGrupo: r.c[1]?.v?.toString().trim() || '',
                linkBase: r.c[2]?.v?.toString().trim() || '',
                linkRua: r.c[3]?.v?.toString().trim() || '',
            }));

            const linhasFiltradas = todasLinhas.filter(linha => linha.siglaBase && linha.siglaBase.length > 0);

            if (linhasFiltradas.length === 0) {
                mostrarBanner('Nenhuma base v√°lida encontrada para extrair.');
                await atualizarTextoPopup('Nenhuma base v√°lida!', true, 0, false, '#FFFFFF', '#d63031');
                return;
            }

            if (!window.dadosBases) window.dadosBases = {};
            const resultados = window.dadosBases;

            await atualizarTextoPopup(`Iniciando extra√ß√£o de ${linhasFiltradas.length} bases...`, false, 500);

            for (const linha of linhasFiltradas) {
                resultados[linha.siglaBase] = resultados[linha.siglaBase] || {};
                logVisual('Iniciando extra√ß√£o', `Base: ${linha.siglaBase}`, '#25D366');

                async function abrirExtrairFechar(url, tipo) {
                    if (!isUrlValida(url)) return null;

                    const aba = window.open('about:blank', '_blank');
                    if (!aba) {
                        mostrarBanner('Bloqueio de pop-up! Permita pop-ups para continuar.');
                        console.error('Pop-up bloqueado para', tipo, ':', url);
                        await atualizarTextoPopup('Bloqueio de pop-ups detectado!', true, 0, false, '#FFFFFF', '#d63031');
                        return null;
                    }
                    aba.location.href = url;

                    return new Promise((resolve, reject) => {
                        const timeout = setTimeout(() => {
                            window.removeEventListener('message', mensagemHandler);
                            if (!aba.closed) {
                                try { aba.close(); } catch {}
                            }
                            reject(new Error(`Timeout esperando dados da aba [${tipo}]: ${url}`));
                        }, TIMEOUT_MS);

                        function mensagemHandler(event) {
                            if (event.source !== aba) return;

                            clearTimeout(timeout);
                            window.removeEventListener('message', mensagemHandler);

                            resultados[linha.siglaBase][tipo] = event.data || null;
                            logVisual(`Dados recebidos [${linha.siglaBase} - ${tipo}]`, JSON.stringify(event.data), '#25D366');

                            if (!aba.closed) {
                                try { aba.close(); } catch {}
                            }

                            resolve(event.data);
                        }

                        window.addEventListener('message', mensagemHandler);
                    });
                }

                try {
                    if (isUrlValida(linha.linkBase)) {
                        await abrirExtrairFechar(linha.linkBase, 'EM BASE');
                    } else {
                        resultados[linha.siglaBase]['EM BASE'] = null;
                    }

                    if (isUrlValida(linha.linkRua)) {
                        await abrirExtrairFechar(linha.linkRua, 'EM RUA');
                    } else {
                        resultados[linha.siglaBase]['EM RUA'] = null;
                    }
                } catch (e) {
                    console.error(`Erro extrair dados para base ${linha.siglaBase}:`, e);
                    if (!resultados[linha.siglaBase]['EM BASE']) resultados[linha.siglaBase]['EM BASE'] = null;
                    if (!resultados[linha.siglaBase]['EM RUA']) resultados[linha.siglaBase]['EM RUA'] = null;
                    await atualizarTextoPopup(`Erro na extra√ß√£o da base ${linha.siglaBase}`, true, 0, false, '#FFFFFF', '#d63031');
                }
            }

            mostrarResumoFormatado(resultados, linhasFiltradas);
            mostrarBanner('Extra√ß√£o completa! Veja console para detalhes.');
            await atualizarTextoPopup('Extra√ß√£o completa!', true, 0, false, '#FFFFFF', '#25D366');

            console.log('‚úÖ Extra√ß√£o completa. Resultados:', resultados);
            baixarCsvResultados(resultados);
        } catch (e) {
            console.error('Erro iniciarExtracaoComPermissaoUser:', e);
            mostrarBanner('Erro ao iniciar extra√ß√£o. Veja console.');
            await atualizarTextoPopup('Erro na extra√ß√£o!', true, 0, false, '#FFFFFF', '#d63031');
        }
    }

    async function esperarPorDadosProntos(tipo, timeoutMs = 20000, intervaloMs = 500) {
        function dadosEstaoProntos() {
            if (tipo === 'EM BASE') {
                const strong = document.querySelector('h4.MuiTypography-root.MuiTypography-h4 strong');
                if (!strong || strong.textContent.trim() !== 'Na base') return false;

                const h4Pai = strong.closest('h4.MuiTypography-root.MuiTypography-h4');
                if (!h4Pai) return false;
                const container = h4Pai.parentElement;
                if (!container) return false;
                const outrosH4 = [...container.querySelectorAll('h4.MuiTypography-root.MuiTypography-h4')].filter(
                    (h4) => !h4.querySelector('strong')
                );
                if (!outrosH4.length) return false;

                const num = parseInt(outrosH4[0].textContent.replace(/\D/g, ''), 10);
                return !isNaN(num);
            } else if (tipo === 'EM RUA') {
                const h4Pacotes = [...document.querySelectorAll('h4.MuiTypography-root.MuiTypography-h4')].find((h4) =>
                    /pacotes/i.test(h4.textContent)
                );
                if (!h4Pacotes) return false;
                const num = parseInt(h4Pacotes.textContent.replace(/\D/g, ''), 10);
                return !isNaN(num);
            }
            return false;
        }

        const startTime = Date.now();
        return new Promise((resolve, reject) => {
            if (dadosEstaoProntos()) {
                resolve(true);
                return;
            }

            const interval = setInterval(() => {
                if (dadosEstaoProntos()) {
                    clearInterval(interval);
                    clearTimeout(timeout);
                    resolve(true);
                } else if (Date.now() - startTime > timeoutMs) {
                    clearInterval(interval);
                    reject(new Error('Timeout esperando dados prontos'));
                }
            }, intervaloMs);

            const timeout = setTimeout(() => {
                clearInterval(interval);
                reject(new Error('Timeout esperando dados prontos'));
            }, timeoutMs);
        });
    }

    async function extrairDadosNaPaginaAtualParaPostMessage() {
        if (document.readyState !== 'complete') {
            await new Promise((resolve) => {
                window.addEventListener('load', () => resolve(), { once: true });
            });
        }

        logVisual('üü¢ Aba filha carregada', 'Esperando dados ficarem prontos...', '#25D366');

        let tipo = null;
        if (window.location.pathname.includes('/na-base/colecoes')) tipo = 'EM BASE';
        else if (window.location.pathname.includes('/na-rua/colecoes')) tipo = 'EM RUA';
        else {
            tipo = 'DESCONHECIDO';
            console.warn('Tipo de p√°gina desconhecido para extra√ß√£o:', window.location.href);
            await atualizarTextoPopup('Tipo p√°gina desconhecido!', true, 0, false, '#FFFFFF', '#d63031');
        }

        try {
            await esperarPorDadosProntos(tipo, 20000, 500);
            logVisual('üü¢ Dados prontos para extra√ß√£o', `Tipo: ${tipo}`, '#25D366');
        } catch (e) {
            console.warn('‚ö†Ô∏è ', e.message, '- tentando extrair de qualquer forma');
            await atualizarTextoPopup('Timeout esperando dados, extraindo com dados incompletos!', false, 0, true, '#FFFFFF', '#d63031');
        }

        let dadosExtraidos =
            tipo === 'EM BASE'
                ? await extrairDadosNaBase(document)
                : tipo === 'EM RUA'
                ? extrairDadosNaRua(document)
                : { erro: 'Tipo de p√°gina desconhecido para extra√ß√£o' };

        logVisual('üü¢ Dados extra√≠dos', JSON.stringify(dadosExtraidos), '#25D366');

        if (window.opener && !window.opener.closed) {
            try {
                window.opener.postMessage(dadosExtraidos, '*');
                logVisual('üü¢ Dados enviados', 'Dados enviados para janela m√£e (opener)', '#25D366');
            } catch (e) {
                console.error('Erro ao enviar postMessage:', e);
                await atualizarTextoPopup('Erro ao enviar dados para a janela m√£e!', true, 0, false, '#FFFFFF', '#d63031');
            }
        } else {
            console.warn('‚ö†Ô∏è Janela m√£e fechada ou n√£o encontrada para envio dos dados.');
            await atualizarTextoPopup('Janela m√£e fechada n√£o enviou dados!', true, 0, false, '#FFFFFF', '#d63031');
        }
    }

    // --- Criar bot√£o para iniciar extra√ß√£o ---
    // Altera√ß√µes para o bot√£o criarBotaoExtrair() - apenas a fun√ß√£o modificada:

function criarBotaoExtrair() {
    if (document.getElementById('btnExtrairArcoLoggi')) return;

    const btn = document.createElement('button');
    btn.id = 'btnExtrairArcoLoggi';
    btn.textContent = 'COLETAR INFORMA√á√ïES DO ARCO';

    Object.assign(btn.style, {
        position: 'fixed',
        bottom: '60px',
        right: '35px',      // alterado de 15px para 25px para alinhar sobre o √≠cone
        zIndex: 10001,
        width: '24px',
        height: '24px',
        padding: '0',
        backgroundColor: '#25D366',
        border: 'none',
        borderRadius: '50%',
        fontWeight: 'bold',
        fontSize: '0',
        color: 'white',
        cursor: 'pointer',
        boxShadow: '0 4px 8px rgba(0,0,0,0.15)',
        userSelect: 'none',
        overflow: 'hidden',
        transition: 'width 0.25s ease, font-size 0.25s ease, padding 0.25s ease, border-radius 0.25s ease',
        whiteSpace: 'nowrap',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
    });

    btn.onmouseenter = () => {
        btn.style.width = '220px';
        btn.style.padding = '6px 16px';
        btn.style.fontSize = '12px';
        btn.style.borderRadius = '20px';
    };
    btn.onmouseleave = () => {
        btn.style.width = '24px';
        btn.style.padding = '0';
        btn.style.fontSize = '0';
        btn.style.borderRadius = '50%';
    };

    btn.onclick = async () => {
        btn.disabled = true;
        btn.textContent = '‚è≥ Extra√ß√£o em andamento...';
        btn.style.width = '220px';
        btn.style.padding = '6px 16px';
        btn.style.fontSize = '12px';
        btn.style.borderRadius = '20px';

        await atualizarTextoPopup('Iniciando extra√ß√£o...', false, 0, false, '#FFFFFF', '#25D366');
        try {
            await iniciarExtracaoComPermissaoUser();
        } catch (e) {
            console.error(e);
            mostrarBanner('‚ùå Erro durante extra√ß√£o.');
            await atualizarTextoPopup('Erro durante extra√ß√£o!', true, 0, false, '#FFFFFF', '#d63031');
        }
        btn.disabled = false;
        btn.textContent = 'COLETAR INFORMA√á√ïES DO ARCO';
        btn.style.width = '24px';
        btn.style.padding = '0';
        btn.style.fontSize = '0';
        btn.style.borderRadius = '50%';

        fecharPopupAnimado();
        adicionarIconeMarcaDagua();
    };

    document.body.appendChild(btn);
}
    // --- Main ---
    async function main() {
        adicionarIconeMarcaDagua();

        if (window.opener && !window.opener.closed) {
            await extrairDadosNaPaginaAtualParaPostMessage();
            return;
        }

        criarBotaoExtrair();

        console.log('%cüöÄ Extrator Arco Loggi Plus iniciado', 'color: #25D366; font-weight: bold; font-size: 16px;');
        console.log('%cClique no bot√£o verde no canto inferior direito para iniciar a extra√ß√£o.', 'color: #666; font-size: 13px;');
    }

    // API p√∫blica opcional para controle externo
    window.ExtratorArcoLoggi = {
        iniciarExtracaoComPermissaoUser,
        extrairDadosNaBase,
        extrairDadosNaRua,
        atualizarTextoPopup,
        fecharPopupAnimado,
    };

    main();
})();